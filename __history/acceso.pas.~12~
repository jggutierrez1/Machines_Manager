unit acceso;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, jpeg, XPMan, Buttons, OleCtrls,
  DB, Mask,
  DBCtrlsEh, ComCtrls, DBGridEh, DBLookupEh, pngimage,
  PngBitBtn, inifiles,
  PngSpeedButton,

  FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf,
  FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, FireDAC.Phys.MySQL, FireDAC.Phys.MySQLDef, ColorButton;

type
  TFacceso = class(TForm)
    Label1: TLabel;
    Label2: TLabel;
    oUser: TEdit;
    oPass: TEdit;
    Label3: TLabel;
    Label4: TLabel;
    oSqlStr: TMemo;
    StatusBar1: TStatusBar;
    oDs_Emp: TDataSource;
    oLst_emp: TDBLookupComboboxEh;
    oLst_Server: TComboBox;
    Image2: TImage;
    PngSpeedButton1: TPngSpeedButton;
    oImage_Lock1: TImage;
    oImage_Lock2: TImage;
    Shape1: TShape;
    Label5: TLabel;
    Shape2: TShape;
    oConection: TFDConnection;
    oQryUser: TFDQuery;
    oEmpresa: TFDQuery;
    oBtn_Cancel: TColorButton;
    oBtn_OK: TColorButton;
    Image1: TImage;
    procedure Button2Click(Sender: TObject);
    procedure Button115Click(Sender: TObject);
    procedure xpBitBtn1Click(Sender: TObject);
    procedure xpBitBtn2Click(Sender: TObject);
    procedure oPassKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure ComboempKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure oBtn_OKClick(Sender: TObject);
    procedure oUserEnter(Sender: TObject);
    procedure oPassEnter(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure oLst_empKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure oLst_ServerKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure oLst_empChange(Sender: TObject);
    procedure oBtn_CancelClick(Sender: TObject);
    procedure PngSpeedButton1Click(Sender: TObject);
    procedure oUserKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure oLst_ServerChange(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure Lee_ini;
    procedure Escribe_ini;
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Facceso: TFacceso;
  sFocus: string;
  iRetryCnt: integer;
  iPassOk: boolean;

implementation

uses SrvConf, utilesV20;
{$R *.dfm}

procedure TFacceso.Button2Click(Sender: TObject);
begin
  close;
end;

procedure TFacceso.Button115Click(Sender: TObject);
begin
  if self.oLst_emp.Text = '' then
  begin
    MessageBox(0, pchar('Debe seleccionar la Empresa'), pchar('INFORMACION'), MB_OK + MB_SYSTEMMODAL);
    self.oLst_emp.SetFocus;
  end
  else
  begin
    close;
  end;
end;

procedure TFacceso.FormCreate(Sender: TObject);
var
  iVer: integer;
begin
  freeandnil(self.oConection);
  iRetryCnt := 0;
  iPassOk := false;
  // iVer:=GetVersion(application.ExeName);
  self.caption := self.caption + ' Ver. ' + iNTToStr(iVer);
  if fUtilesV20.CargarServidoresActivos(self.oLst_Server) <= 0 then
    self.oLst_Server.Items.Clear
  else
  begin
    self.oLst_Server.ItemIndex := 0;
  end;
end;

procedure TFacceso.FormShow(Sender: TObject);
begin
  if trim(self.oLst_Server.Text) <> '' then
  begin
    self.oLst_ServerChange(self);
    self.Lee_ini;
  end;
  self.Image2.Picture := self.oImage_Lock1.Picture;
  fUtilesV20.WaitEnd;
end;

procedure TFacceso.xpBitBtn1Click(Sender: TObject);
begin
  if self.oLst_emp.Text = '' then
  begin
    MessageBox(0, pchar('Debe seleccionar la Empresa'), pchar('INFORMACION'), MB_OK + MB_SYSTEMMODAL);
    self.oLst_emp.SetFocus;
  end
  else
  begin
    close;
  end;
end;

procedure TFacceso.xpBitBtn2Click(Sender: TObject);
begin
  close;
end;

procedure TFacceso.oUserEnter(Sender: TObject);
begin
  sFocus := 'USER';
  self.oBtn_OK.Enabled := true;
end;

procedure TFacceso.oUserKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if (Key = VK_RETURN) then
    self.oPass.SetFocus;
end;

procedure TFacceso.PngSpeedButton1Click(Sender: TObject);
begin
  application.CreateForm(TfSrvCnf, fSrvCnf);
  fSrvCnf.ShowModal;
  fSrvCnf.Free;
  if fUtilesV20.CargarServidoresActivos(self.oLst_Server) <= 0 then
    self.oLst_Server.Items.Clear
  else
  begin
    self.oLst_Server.ItemIndex := 0
  end;
  utilesV20.bConnectionOk := false;
end;

procedure TFacceso.oPassEnter(Sender: TObject);
begin
  sFocus := 'PASS';
  self.oBtn_OK.Enabled := true;
end;

procedure TFacceso.oPassKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if (Key = VK_RETURN) then
  begin
    self.oBtn_OK.SetFocus;
    self.oBtn_OKClick(self);
  end;
end;

procedure TFacceso.ComboempKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if (Key = VK_RETURN) then
    self.oBtn_OK.SetFocus;
end;

procedure TFacceso.oBtn_CancelClick(Sender: TObject);
begin
  iPassOk := false;
  //close;
  halt;
end;

procedure TFacceso.oBtn_OKClick(Sender: TObject);
var
  sDB_User: string[20];
  sDB_Pass: string[20];
  iDB_Acce: integer;
  sClave: string;
begin
  if oUser.Text = '' then
  begin
    MessageBox(0, pchar('Debe colocar el nombre de Usuario'), pchar('INFORMACION'), MB_OK + MB_SYSTEMMODAL);
    self.oUser.SetFocus;
    exit;
  end;

  if oLst_emp.Text = '' then
  begin
    MessageBox(0, pchar('Debe seleccionar la Empresa'), pchar('INFORMACION'), MB_OK + MB_SYSTEMMODAL);
    self.oLst_emp.SetFocus;
    exit;
  end;

  if (fUtilesV20.isempty(self.oUser.Text) or fUtilesV20.isempty(self.oPass.Text)) then
  begin
    MessageBox(0, pchar('Nombre de Usuario o clave incorrecta'), pchar('INFORMACION'), MB_OK + MB_SYSTEMMODAL);
    self.oUser.SetFocus;
    exit;
  end;

  if fUtilesV20.BUSCARusuario(oQryUser, trim(oUser.Text)) <= 0 then
  begin
    MessageBox(0, pchar('Nombre de Usuario o clave incorrecta'), pchar('INFORMACION'), MB_OK + MB_SYSTEMMODAL);
    utilesV20.sSlectedHost := '';
    exit;
  end;

  if ((oQryUser.FieldByName('emp_id').AsInteger = 0) or (oQryUser.FieldByName('emp_id').value = null)) then
  begin
    MessageDlg('Este usuario no tiene una empresa asignada, no es posible continuar.', mtWarning, [mbOK], 0);
    iPassOk := false;
    close;
  end;

  sDB_User := trim(oQryUser.FieldByName('u_usuario').AsString);
  sDB_Pass := trim(oQryUser.FieldByName('u_clave').AsString);
  iDB_Acce := oQryUser.FieldByName('u_acceso1').AsInteger;
  sClave := fUtilesV20.Encrypt(trim(self.oPass.Text));
  if ((sDB_User = oUser.Text) and (sDB_Pass = sClave)) then
  begin
    self.Image2.Picture := self.oImage_Lock2.Picture;
    self.Image2.Repaint;
    sleep(1000);
    FormatSettings.shortdateformat := 'dd/mm/yyyy';
    self.Hide;
    utilesV20.sPathReports := ExtractFilePath(application.ExeName) + 'Reportes';
    utilesV20.sSlectedHost := trim(self.oLst_Server.Text);
    utilesV20.iId_Empresa := oQryUser.FieldByName('emp_id').AsInteger;
    utilesV20.sUserName := trim(self.oUser.Text);
    // utilesV20.nSuperUsr := iDB_Acce;
    fUtilesV20.Get_Values3;
    ModalResult := mrOk;
    iPassOk := true;

    self.Escribe_ini;
    close;
  end
  else
  begin
    MessageBox(0, pchar('Nombre de Usuario o clave incorrecta'), pchar('INFORMACION'), MB_OK + MB_SYSTEMMODAL);
    utilesV20.sSlectedHost := '';
    inc(iRetryCnt);
    if (iRetryCnt > 2) then
    begin
      ShowMessage('Supero la cantidad de intentos permitidos.');
      ModalResult := mrabort;
      iPassOk := false;
      close;
    end;
  end;
end;

procedure TFacceso.Escribe_ini;
var
  oFileIni: Tinifile;
  cUser, cComp: string;
begin
  oFileIni := Tinifile.Create(ExtractFilePath(application.ExeName) + 'Data\Config.ini');
  if trim(self.oLst_emp.Text) <> '' then
    oFileIni.WriteString('LASTACCESS', 'company', self.oLst_emp.value);
  if trim(self.oUser.Text) <> '' then
    oFileIni.WriteString('LASTACCESS', 'user', self.oUser.Text);
  oFileIni.Free;
end;

procedure TFacceso.Lee_ini;
var
  oFileIni: Tinifile;
  cUser, cComp: string;
begin
  oFileIni := Tinifile.Create(ExtractFilePath(application.ExeName) + 'Data\Config.ini');

  cComp := oFileIni.ReadString('LASTACCESS', 'company', '');
  cUser := oFileIni.ReadString('LASTACCESS', 'user', '');
  if trim(cComp) <> '' then
  begin
    self.oLst_emp.value := cComp;
    self.oLst_empChange(self);
  end;
  if trim(cUser) <> '' then
  begin
    self.oUser.Text := cUser;
  end;
  oFileIni.Free;
end;

procedure TFacceso.oLst_empChange(Sender: TObject);
begin
  if oLst_emp.value <> 0 then
  begin
    self.oUser.Enabled := true;
    self.oPass.Enabled := true;
    self.oUser.SetFocus;
  end
  else
  begin
    self.oUser.Enabled := false;
    self.oPass.Enabled := false;
  end;
  self.oUser.Text := '';
end;

procedure TFacceso.oLst_empKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if (Key = VK_RETURN) then
    self.oUser.SetFocus;
end;

procedure TFacceso.oLst_ServerChange(Sender: TObject);
var
  sServerName: string;
  sSqlCmd: string;
begin
  try
    sServerName := trim(self.oLst_Server.Text);
    if fUtilesV20.isempty(self.oLst_Server.Text) = false then
    begin
      self.oLst_emp.Enabled := false;

      self.oLst_emp.Clear;
      self.oLst_emp.Refresh;
      self.oLst_emp.Enabled := false;
      utilesV20.bConnectionOk := false;
      fUtilesV20.ConnectServer(sServerName);
      oSqlStr.Clear;
      oSqlStr.Lines.Clear;
      oSqlStr.Lines.Add('SELECT emp_id,emp_descripcion FROM empresas ');
      oSqlStr.Lines.Add('WHERE emp_inactivo=0 ');
      oSqlStr.Lines.Add('ORDER BY emp_descripcion ');
      utilesV20.Exec_Select_SQL(self.oEmpresa, self.oSqlStr.Text, true);
      oSqlStr.Lines.Clear;
      oEmpresa.First;
      self.oDs_Emp.DataSet := oEmpresa;
      self.oLst_emp.Enabled := true;
      if (oEmpresa.RecordCount <= 0) then
      begin
        self.oLst_emp.Enabled := false;
        ShowMessage('No hay empresa para trabajar.');
        sSqlCmd :=
          'INSERT INTO `empresas` (`emp_descripcion`, `emp_carpeta_reportes`, `emp_inactivo`) VALUES ("Empresa Pruebas", "'
          + ExtractFilePath(ParamStr(0)) + 'Reportes"' + ', 1)';
        utilesV20.Execute_SQL_Command(sSqlCmd);
        exit;
      end
      else
        self.oLst_emp.KeyValue := oEmpresa.FieldByName('emp_id').value;
      // self.oLst_emp.SetFocus;
    end;
  except
    on E: Exception do
    begin
      application.ShowException(E);
      bConnectionOk := false;
      exit;
    end;
  end;

end;

procedure TFacceso.oLst_ServerKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if (Key = VK_RETURN) then
    self.oLst_emp.SetFocus;
end;

end.
